<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverURL" elementType="Argument">
            <stringProp name="Argument.name">serverURL</stringProp>
            <stringProp name="Argument.value">wikitech.wikimedia.org</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sport" elementType="Argument">
            <stringProp name="Argument.name">sport</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spath" elementType="Argument">
            <stringProp name="Argument.name">spath</stringProp>
            <stringProp name="Argument.value">wiki/EventStreams</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="reconnectionTime" elementType="Argument">
            <stringProp name="Argument.name">reconnectionTime</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sleepTime" elementType="Argument">
            <stringProp name="Argument.name">sleepTime</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="unum" elementType="Argument">
            <stringProp name="Argument.name">unum</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="itnum" elementType="Argument">
            <stringProp name="Argument.name">itnum</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lengthOfWork" elementType="Argument">
            <stringProp name="Argument.name">lengthOfWork</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="messagesCount" elementType="Argument">
            <stringProp name="Argument.name">messagesCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${itnum}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${unum}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler Connect to SSE server and receive a stream" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters">${serverURL} ${sport} ${spath} ${reconnectionTime} ${sleepTime} ${protocol}</stringProp>
          <stringProp name="script">import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.EventHandler;
import com.launchdarkly.eventsource.MessageEvent;
import java.net.URI;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;

public class SimpleEventHandler implements EventHandler {

	private ArrayList&lt;String&gt; responseArray = new ArrayList&lt;String&gt;();

	public void onOpen() throws Exception{
		log.info(&quot;The connection has been opened&quot;);
	}

	public void onClosed() throws Exception{
		vars.putObject(&quot;responseArray&quot;,responseArray);
		log.info(&quot;The connection has been closed&quot;);
	}

	public void onMessage(String Event, MessageEvent messageEvent) throws Exception{
		responseArray.add(messageEvent.getData());
		log.info(&quot;Event &quot;+messageEvent.getData());
	}

	public void onComment(String comment) throws Exception{
		log.info(comment);
	}

	public void onError(Throwable t){
		log.info(&quot;Error &quot;+t);
	}
}

	EventHandler eH = new SimpleEventHandler();
	if([args[5]==&quot;&quot;])
		String url = &quot;http://&quot;+args[0];
	else
		String url = args[5]+&quot;://&quot;+args[0];
	
	if((args[1]!=&quot;&quot;)&amp;&amp;(args[1]!=&quot;80&quot;))
		url = url+args[1];

	if(args[2]!=&quot;&quot;)
		url=url+&quot;/&quot;+args[2];
	
	System.out.println(url);
	EventSource.Builder builder = new EventSource.Builder(eH, URI.create(url));

	EventSource eventSource = builder.build();
	eventSource.setReconnectionTimeMs(Integer.parseInt(args[3]));
	props.put(&quot;eS&quot;,eventSource);
	eventSource.start();
	TimeUnit.SECONDS.sleep(Integer.parseInt(args[4]));
	eventSource.close();
	</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
