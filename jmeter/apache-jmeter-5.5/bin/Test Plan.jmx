<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="serverURL" elementType="Argument">
            <stringProp name="Argument.name">serverURL</stringProp>
            <stringProp name="Argument.value">http://localhost:8080/rooms/1/msgs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="reconnectionTime" elementType="Argument">
            <stringProp name="Argument.name">reconnectionTime</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lengthOfWork" elementType="Argument">
            <stringProp name="Argument.name">lengthOfWork</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.launchdarkly.eventsource.EventHandler
import com.launchdarkly.eventsource.EventSource
import com.launchdarkly.eventsource.MessageEvent

import javax.json.Json
import javax.json.JsonObject
import javax.json.JsonReader
import javax.json.JsonValue
import java.util.concurrent.TimeUnit

public class SimpleEventHandler implements EventHandler {

    public List&lt;String&gt; respList = new ArrayList&lt;String&gt;();

    public void onOpen() throws Exception {
        log.info(&quot;The connection has been opened&quot;);
    }

    public void onClosed() throws Exception {
        log.info(&quot;The connection has been closed&quot;);
    }

    public void onMessage(String Event, MessageEvent messageEvent) throws Exception {
        respList.add(messageEvent.getData());
    }

    public void onComment(String comment) throws Exception {
        log.info(comment);
    }

    public void onError(Throwable t) {
        log.info(&quot;Error &quot; + t);
    }
}

EventHandler eH = new SimpleEventHandler();

String responseList = &quot;&quot;;

EventSource.Builder builder = new EventSource.Builder(eH, URI.create(args[0]));

EventSource eventSource = builder.build();
eventSource.setReconnectionTimeMs(Integer.parseInt(args[1]));
eventSource.start();
TimeUnit.SECONDS.sleep(Integer.parseInt(args[2]));
eventSource.close();

for (String respRecord : eH.respList) {
    JsonReader jsonReader = Json.createReader(new StringReader(respRecord));
    JsonObject jsonObject = jsonReader.readObject();
    JsonValue title = jsonObject.getValue(args[3]);
    JsonValue changeType = jsonObject.getValue(args[4]);
    responseList = responseList + changeType.toString() + &quot; : &quot; + title.toString() + &quot;\n&quot;;
}

SampleResult.setResponseData(responseList, &quot;866&quot;);</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Listener>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
